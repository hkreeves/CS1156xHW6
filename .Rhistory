sampleX <- matrix(runif(2000, -1, 1), ncol=1)
sampleY <- apply(sampleX, 1, function(x){ sin(Pi*x[1])+sin(Pi*x[2]) })
pi
sampleY <- apply(sampleX, 1, function(x){ sin(pi*x[1])+sin(pi*x[2]) })
sampleY
sampleY <- apply(sampleX, 1, function(x){ x })
sampleY
head(sampleX)
head(sampleY)
sampleX <- matrix(runif(2000, -1, 1), ncol=2)
sampleY <- apply(sampleX, 1, function(x){ x[2] })
head(sampleX)
head(sampleY)
alpha <- apply(sampleX, 1, function(x){ sum(sin(pi*x))/sum(x)})
head(alpha)
mean(aplha)
mean(alpha)
head(sin(pi*sampleX))
sampleX <- matrix(runif(20000, -1, 1), ncol=2)
alpha <- apply(sampleX, 1, function(x){ sum(sin(pi*x))/sum(x)})
mean(alpha)
head(sampleY)
head(sin(pi*sampleX))
head(sampleX)
length(alpha)
seq(0, 1, 100)
seq(0, 1, 0.1)
x <- seq(-1, 1, 1000)
malpha <- mean(aplha)
malpha <- mean(alpha)
?var
var(1:5, 1:5)
mse(1:5, 1:5)
y <- sin(pi*x)
yp <- malpha*x
mean((y-yp)^2)
mean((y-0)^2)
y
x
x <- seq(-1, 1, 0.0001)
y <- sin(pi*x)
yp <- malpha*x
mean((y-yp)^2)
mean((y-0)^2)
getvar <- function(alpha)
{
getvar <- function(x)
{
mean(((alpha-malpha)*x)^2)
}
getvar(0.01)
mean(sapply(x, getvar))
mean(sapply(seq(-1,1, 0.01), getvar))
mean(sapply(seq(-1,1, 0.1), getvar))
mean(sapply(seq(-1,1, 0.001), getvar))
length(alpha)
getalpha <- function(x)
{
sum(x*sin(pi*x))/sum(x^2)
}
alphas <- apply(sampleX, 1, getalpha)
length(alphas)
malpha <- mean(alphas)
malpha
head(sampleX)
head(alphas)
plot(sampleX[1,], sin(pi*sampleX[1,])
)
lines(seq(-1,1,0.01), seq(-1,1,0.01)*alphas[1], type='l')
plot(sampleX[2,], sin(pi*sampleX[2,])
)
lines(seq(-1,1,0.01), seq(-1,1,0.01)*alphas[2], type='l')
sin(sampleX[1,1]*pi)*sampleX[1,1]+sin(sampleX[1,2]*pi)*sampleX[1,2]
sum(x[1,]^2)
x[1,]
sum(sampleX[1,]^2)
1.0286/0.7796
summary(alphas)
sampleX <- matrix(runif(20000, -1, 1), ncol=2)
alphas <- apply(sampleX, 1, getalpha)
malpha <- mean(alphas)
malpha
plot(x, y)
length(x)
x <- seq(-1,1, 0.01)
y=sin(pi*x)
plot(x, y)
lines(x, x*malpha, type='l')
lines(x, x*0.79, type='l')
plot(x, y)
lines(x, x*0.79, type='l', col='red')
lines(x, x*malpha, pch='b--')
lines(x, x*1.07, pch='g..')
plot(x, y)
lines(x, x*malpha, col='black')
lines(x, x*0.79, col='red', type='dotted')
lines(x, x*0.79, col='red', type='dotted')
lines(x, x*0.79, col='red', type='d')
lines(x, x*0.79, col='red', type='l', )
lines(x, x*0.79, col='red', type='l')
lines(x, x*1.07, col='blue', type='l')
getalphabeta <- function(x)
{
sumx <- sum(x)
sumxx <- sum(x^2)
sumxy <- sum(x*sin(pi*x))
sumy <- sum(sin(pi*x))
N <- length(x)
alpha <- (sumxy - sumx*sumy/N)/(sumxx - sumx^2/N)
beta <- (sumy - alpha*sumx)/N
c(alpha, beta)
}
twovar <- apply(sampleX, 1, getalphabeta)
head(twovar)
str(twovar)
head(t(twovar))
colMeans(t(twovar)
)
?apply
getbias <- function(g)
{
x <- seq(-1, 1, 0.001)
y <- sin(pi*x)
yp <- sapply(x, g)
mean((y-yp)^2)
}
getbias(function(x) {0.02631413 + 0.78739704*x})
getbias(function(x) {malpha*x})
getbias <- function(g,...)
{
x <- seq(-1, 1, 0.001)
y <- sin(pi*x)
yp <- sapply(x, g, ...)
mean((y-yp)^2)
}
getbias(g2 <- function(x, vars) vars[1]*x + vars[2] 
g2 <- function(x, vars) vars[1]*x + vars[2] 
g2
getbias(g2, vars=colMeans(twovars))
twovars <- t(apply(sampleX, 1, getalphabeta)
)
getbias(g2, vars=colMeans(twovars))
g1 <- function(x, vars) vars[1]*x
g1 <- function(x, vars) vars[1]*x
getbias(g1, vars=malpha)
colMeans(alphas)
twovars[1]
twovars[1,]
?mse
getvariance1 <- function(vars)
{
malpha <- mean(vars)
getvar_singlepoint <- function(x) mean((vars - malpha)*x)^2
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance1(alphas)
length(alphas)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
dim(twovars)
sampleX[1,]
getvariance1 <- function(vars)
{
malpha <- mean(vars)
getvar_singlepoint <- function(x) mean((vars - malpha)*x)^2)
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance1 <- function(vars)
{
malpha <- mean(vars)
getvar_singlepoint <- function(x) mean(((vars - malpha)*x)^2)
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance1(alphas)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.1)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.01)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.05)
mean(sapply(x, getvar_singlepoint))
}
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.05)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
alphas <- matrix(alphas, ncol=1)
colMeans(alphas)
getvariance2 <- function(g, vars)
{
if(is.list(vars))
vars <- matrix(vars, ncol=1)
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g(x, v) - g(x, mvars))^2))
}
x <- seq(-1, 1, 0.01)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(g2, twovars)
getvariance2(g1, alphas)
getvariance1(alphas)
geta <- function(x)
{
sumxxxx <- sum(x^4)
sumxxy <- sum(x^2*sin(pi*x))
sumxxy/sumxxxx
}
aa <- apply(sampleX, 1, geta)
maa <- mean(aa)
g3 <- function(x, vars) vars[1]*x^2
maa
getbias(g3, aa)
getvariance(g3, aa)
getvariance2(g3, aa)
is.list(aa)
class(aa)
dim(aa)
aa <- matrix(aa, ncol=1)
getvariance2(g3, aa)
getab <- function(x)
{
sumxxxx <- sum(x^4)
sumxx <- sum(x^2)
sumy <- sum(sin(pi*x))
N <- length(x)
sumxxy <- sum(x^2*sin(pi*x))
a <- (sumxxy - sumxx*sumy/N)/(sumxxxx - sumxx^2/N)
b <- (sumy-a*sumxx)/N
c(a,b)
}
aabb <- t(apply(sampleX, 1, getab))
g4 <- function(x, vars) vars[1]*x^2+vars[2]
getbias(g4)
getbias(g4, aabb)
getvariance2(g4, aabb)
q()
rbinom(10, 2, 0.5)
?rbinom
installpackages(kernlab)
installpackage(kernlab)
install.packages(kernlab)
?install.packages
install.packages("kernlab")
search()
library("kernlab")
search()
data(spam)
str(spam)
dim(spam)
length(spam)
num.obs <- dim(spam)[1]
# split data into train/test
set.seed(1314)
train.id <- rbinom(num.obs, 1, 0.5)
table(train.id)
trainSpam <- spam[train.id==1, ]
trainSpam <- spam[train.id==0, ]
testSpam <- spam[train.id==0, ]
trainSpam <- spam[train.id==1, ]
trainSpam <- spam[train.id==1, ]
testSpam <- spam[train.id==0, ]
names(trainSpam)
head(trainSpam$capitalAve)
head(trainSpam$capitalTotal)
plot(log10(trainSpam[, 1:4]+1))
plot(log10(trainSpam[, 1:2]+1))
!T
utils:::menuInstallPkgs()
din <- read.csv("http://work.caltech.edu/data/in.dta")
din
str(din)
din <- read.csv("http://work.caltech.edu/data/in.dta", header=F)
str(din)
head(din)
din <- read.table("http://work.caltech.edu/data/in.dta", header=F)
head(din)
str(din)
Xin <- din[,1:2]
Yin <- din[,3]
Yin
din <- read.table("http://work.caltech.edu/data/in.dta")
din
nonlinTrans <- function(x)
{
apply(X, 1, function(x) {1, x[1], x[2], x[1]^2, x[2]^2, abs(x[1]-x[2]),
abs(x[1]+x[2]))
}
nonlinTrans <- function(x)
{
apply(X, 1, function(x) {1, x[1], x[2], x[1]^2, x[2]^2, abs(x[1]-x[2]),
abs(x[1]+x[2])})
}
nonlinTrans <- function(x)
{
apply(X, 1, function(x) c(1, x[1], x[2], x[1]^2, x[2]^2, abs(x[1]-x[2]),
abs(x[1]+x[2])))
}
zin <- nonlinTrans(Xin)
abs(x[1]+x[2])))nonlinTrans <- function(X)
{
apply(X, 1, function(x) c(1, x[1], x[2], x[1]^2, x[2]^2, abs(x[1]-x[2]),
abs(x[1]+x[2])))
}
nonlinTrans <- function(X)
{
apply(X, 1, function(x) c(1, x[1], x[2], x[1]^2, x[2]^2, abs(x[1]-x[2]),
abs(x[1]+x[2])))
}
 zin <- nonlinTrans(Xin)
zin[1,]
Xin
dim(zin)
zin <- t(zin)
head(zin)
class(zin)
colnames(zin)
plot(Xin, col=as.factor(Yin))
din <- read.table("http://work.caltech.edu/data/in.dta")
dout <- read.table("http://work.caltech.edu/data/out.dta")
plot(din[,1:2], col=factor(din[,3])
)
plot(dout[,1:2], col=factor(dout[,3]))
din <- read.table("http://work.caltech.edu/data/in.dta", header=c("x1", "x2", "y"))
?read.table
din <- read.table("http://work.caltech.edu/data/in.dta", 
col.names=("x1,"x2","y"))
plot(din[,1:2], col=factor(din[,3]))
din <- read.table("http://work.caltech.edu/data/in.dta", 
col.names=c("x1,"x2","y"))
din <- read.table("http://work.caltech.edu/data/in.dta", 
col.names=c("x1","x2","y"))
plot(din[,1:2], col=factor(din[,3]))
dout <- read.table("http://work.caltech.edu/data/out.dta",
col.names=c("x1","x2","y"))
getwd()
getwd()
setwd("./CS1156xHW6")
source("weightdecay.R")
testlinReg()
source("weightdecay.R")
testlinReg()
source("weightdecay.R")
testlinReg()
source("weightdecay.R")
testlinReg()
1/35
eye(2)
diag(2)
diag(4)
?diag
source("weightdecay.R")
testlinReg(lambda=0.001)
testlinReg(lambda=0.001)
source("weightdecay.R")
testlinReg(lambda=0.001)
testlinReg(lambda=0)
testlinReg(lambda=1)
testlinReg(lambda=100)
testlinReg(lambda=1000)
testlinReg(lambda=0.1)
testlinReg(lambda=1)
testlinReg(lambda=1000)
testlinReg(lambda=0.1)
testlinReg(lambda=0.01)
testlinReg(lambda=1)
testlinReg(lambda=10)
testlinReg(lambda=100)
testlinReg(lambda=0.04)
testlinReg(lambda=0.06)
testlinReg(lambda=0.08)
testlinReg(lambda=0.1)
testlinReg(lambda=0.12)
source("weightdecay.R")
Yin
head(Xin)
head(Zin)
source("weightdecay.R")
head(Zin)
head(Xin)
linReg(Zin, Yin)
t(Zin) %*% Zin
wd.linReg(Zin, Yin, 0)
wd.linReg(Zin, Yin, 0.001)
wd.linReg(Zin, Yin, 0.01)
w <- wd.linReg(Zin, Yin, 0.01)
predict(Zin, w)
cbind(predict(Zin, w),Yin)
pYout predict(Zout, w)
pYout <- predict(Zout, w)
mean(Yout!=pYout)
lmd = -50:50
eouts <- sapply(lmd, function(x) testlinReg(x)[2])
eouts <- sapply(lmd, function(x) testlinReg(lambda=x)[2])
plot(lmd, eouts)
10^(c(1,2,3))
plot(10^lmd, eouts, kind="l")
plot(10^lmd, eouts, type="l")
lmd <- 10^(-50:50)
eouts <- sapply(lmd, function(x) testlinReg(lambda=x)[2])
plot(lmd, eouts)
plot(-50:50, eouts)
plot(-50:50, eouts, type="l")
eouts
diag(7)
0.1*diag(7)
dim(Zin)
dim(dout)
dim(Zout)
library(ggplot2)
qplot(-50:50, eouts, type="l")
qplot(-50:50, eouts, facet="line")
?qplot
qplot(-50:50, eouts, geom="line")
w <- wd.linReg(1000)
w <- wd.linReg(lambda1000)
w <- wd.linReg(lambda=1000)
w <- wd.linReg(Zin, lambda=1000)
w <- wd.linReg(Zin, Yin, lambda=1000)
w
pY <- predict(Zin, w)
table(pY)
table(predict(Zout, w))
plot(-50:50, eouts, type="l")
eouts
lmd = 10^(seq(-3,3,0.1))
lmd
seq(0,1,0.1)
seq(-1,1,0.1)
eouts <- sapply(lmd, function(x) testlinReg(lambda=x)[2])
plot(eouts)
plot(seq(-3,3,0.1),eouts)
plot(seq(-3,3,0.1),eouts, type="l")
plot(seq(-3,3,0.1),eouts, type="l", xlim=c(-2,2))
plot(seq(-3,3,0.1),eouts, type="l", xlim=c(-2,1))
plot(seq(-3,3,0.1),eouts, type="l", xlim=c(-2,2))
ls()
rm(list=ls())
source("weightdecay.R")
testlinReg()
testlinReg(lambda=0.001)
testlinReg(lambda=1000)
sapply(c(0.001,1000), testlinReg(F,))
testlinReg(F,1)
sapply(c(0.001,1000), testlinReg(), plot.on=F)
sapply(c(0.001,1000), function(x) testlinReg(lambda=x))
sapply(10^(-10:10), function(x) testlinReg(lambda=x))
eouts <- sapply(10^(-10:10), function(x) testlinReg(lambda=x))
plot(-10:10, eouts[2,])
plot(-10:10, eouts[2,], type="l")
eouts[2,]
k <- seq(-2,0,0.1)
eouts <- sapply(10^k, function(x) testlinReg(lambda=x))
plot(k, eouts[2,], type="l")
k <- seq(-2,0,0.01)
eouts <- sapply(10^k, function(x) testlinReg(lambda=x))
plot(k, eouts[2,], type="l")
plot(k, eouts[1,], type="l")
testlinReg(lambda=0.1)
testlinReg(lambda=0.01)
testlinReg(lambda=0.02)
testlinReg(lambda=1)
lines(k, eouts[2,], type="l")
plot(k, eouts[1:2,], type="l")
plot(k, eouts[2,], type="l")
plot(k, eouts[2,], type="l", ylim=c(0,0.1))
lines(k, eouts[1,], type="l")
q()
